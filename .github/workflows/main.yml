name: Kali Full Tools (Ubuntu host, install Kali packages + latest Go + tools)

# manual trigger
on:
  workflow_dispatch:

jobs:
  kali-full:
    runs-on: ubuntu-latest
    timeout-minutes: 720   # 12 jam, paket banyak dan butuh waktu

    env:
      KALI_META: "kali-linux-full"   # change to kali-linux-large / kali-linux-top10 to reduce size
      TOOLS_DIR: /opt/tools
      GOPATH: /opt/go
      GOBIN: /opt/go/bin

    steps:
      - name: Basic: show runner info
        run: |
          echo "Runner info:"
          uname -a
          lsb_release -a || true
          free -h
          df -h /
          echo "----"

      - name: Set noninteractive and update
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update -y
          sudo apt-get upgrade -y

      - name: Add Kali rolling repository (CAREFUL)
        run: |
          # We add Kali repo so we can install Kali meta-packages.
          # This can be risky on Ubuntu; we will pin Kali low priority to avoid accidental upgrades.
          echo "deb http://http.kali.org/kali kali-rolling main contrib non-free" | sudo tee /etc/apt/sources.list.d/kali.list
          # add Kali archive key
          curl -fsSL https://archive.kali.org/archive-key.asc | sudo gpg --dearmor -o /usr/share/keyrings/kali-archive-keyring.gpg
          # pin priority low so Ubuntu base is preferred; explicit installs will still work
          cat <<'EOF' | sudo tee /etc/apt/preferences.d/99kali
Package: *
Pin: release a=kali-rolling
Pin-Priority: 100
EOF
          sudo apt-get update -y

      - name: Install Kali meta-package (this may be large â€” watch logs)
        run: |
          echo "Installing Kali meta-package: $KALI_META"
          # try install; allow apt to resolve; it may take long and use big disk
          sudo apt-get install -y --no-install-recommends $KALI_META || {
            echo "Primary install failed; attempting smaller meta-package..."
            sudo apt-get install -y --no-install-recommends kali-linux-large || true
          }
          # give dpkg a bit to configure if pending
          sudo dpkg --configure -a || true

      - name: Create non-root user & SSH (recommended to use SSH key)
        env:
          SSH_PUB_KEY: ${{ secrets.SSH_PUB_KEY || '' }}
        run: |
          USER=linuxuser
          PASS="Linux123!@"
          sudo useradd -m -s /bin/bash $USER || true
          echo "$USER:$PASS" | sudo chpasswd
          sudo usermod -aG sudo $USER
          sudo mkdir -p /home/$USER/.ssh
          sudo chown $USER:$USER /home/$USER/.ssh
          sudo chmod 700 /home/$USER/.ssh

          if [ -n "$SSH_PUB_KEY" ]; then
            echo "$SSH_PUB_KEY" | sudo tee /home/$USER/.ssh/authorized_keys > /dev/null
            sudo chown $USER:$USER /home/$USER/.ssh/authorized_keys
            sudo chmod 600 /home/$USER/.ssh/authorized_keys
            echo "SSH key installed for $USER"
          else
            echo "No SSH_PUB_KEY secret found. Use password: $PASS"
          fi

          sudo sed -i 's/^#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config || true
          sudo sed -i 's/^PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config || true
          sudo systemctl restart ssh || true

      - name: Add swap (4GB) + install zram-tools
        run: |
          # create swapfile if not exists
          if [ ! -f /swapfile ]; then
            sudo fallocate -l 4G /swapfile
            sudo chmod 600 /swapfile
            sudo mkswap /swapfile
            sudo swapon /swapfile
            echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab
            echo "Swap 4G created"
          else
            echo "Swap exists"
          fi
          sudo apt-get install -y zram-tools || true

      - name: Install latest Go (resolve dynamically from go.dev)
        run: |
          set -euo pipefail
          echo "Fetching latest go version from go.dev..."
          # use JSON endpoint to get latest stable
          latest_json=$(curl -fsS https://go.dev/dl/?mode=json)
          latest_ver=$(echo "$latest_json" | jq -r '.[0].version' )
          echo "Latest Go: $latest_ver"
          tarball=$(echo "$latest_json" | jq -r '.[0].files[] | select(.os=="linux" and .arch=="amd64") | .filename' )
          url="https://go.dev/dl/${tarball}"
          echo "Downloading $url"
          curl -fsSL -o /tmp/${tarball} "$url"
          sudo rm -rf /usr/local/go || true
          sudo tar -C /usr/local -xzf /tmp/${tarball}
          rm -f /tmp/${tarball}
          # symlink and PATH
          echo "export PATH=\$PATH:/usr/local/go/bin:/opt/go/bin" | sudo tee /etc/profile.d/go_path.sh
          source /etc/profile.d/go_path.sh || true
          /usr/local/go/bin/go version

      - name: Create tools directory and install common tools (apt + go + pip)
        run: |
          sudo mkdir -p ${TOOLS_DIR} ${GOPATH}/bin
          sudo chown $USER:$USER ${TOOLS_DIR} ${GOPATH}
          sudo apt-get install -y --no-install-recommends build-essential git python3-pip unzip wget jq htop net-tools tcpdump nmap masscan
          # go tools (installed as unprivileged user into /opt/go/bin)
          /usr/local/go/bin/go install github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest || true
          /usr/local/go/bin/go install github.com/projectdiscovery/httpx/cmd/httpx@latest || true
          /usr/local/go/bin/go install github.com/projectdiscovery/nuclei/v2/cmd/nuclei@latest || true
          /usr/local/go/bin/go install github.com/projectdiscovery/dnsx/cmd/dnsx@latest || true
          /usr/local/go/bin/go install github.com/projectdiscovery/naabu/v2/cmd/naabu@latest || true
          /usr/local/go/bin/go install github.com/ffuf/ffuf@latest || true
          # install some python tools
          sudo pip3 install trufflehog wfuzz || true
          echo "Installed core tools. Binaries in /usr/local/go/bin and /opt/go/bin"

      - name: Add /opt/go/bin to PATH for linuxuser and root
        run: |
          echo 'export PATH=$PATH:/usr/local/go/bin:/opt/go/bin' | sudo tee -a /root/.bashrc
          echo 'export PATH=$PATH:/usr/local/go/bin:/opt/go/bin' | sudo tee -a /home/linuxuser/.bashrc
          sudo chown linuxuser:linuxuser /home/linuxuser/.bashrc || true

      - name: Performance sysctl tweaks (network / file limits)
        run: |
          # Be conservative; tweaks that help scanning / concurrency
          sudo sysctl -w net.core.somaxconn=1024
          sudo sysctl -w fs.file-max=100000
          sudo sh -c 'ulimit -n 65536 || true'

      - name: Show final status & connection info
        run: |
          echo "----------------------------"
          echo "Kali meta-pkg: $KALI_META"
          echo "Tools dir: ${TOOLS_DIR}"
          echo "Go: $(/usr/local/go/bin/go version || true)"
          echo "User: linuxuser (passwd: Linux123!@ if no SSH key provided)"
          echo "Check installed tools:"
          ls -la /usr/local/go/bin || true
          ls -la /opt/go/bin || true
          echo "Disk usage:"
          df -h /
          echo "Memory:"
          free -h
          echo "If apt failed for space/conflict, consider switching to a self-hosted runner (recommended for heavy setups)."
          echo "----------------------------"

      - name: Keep runner alive (until manual cancel or timeout)
        run: |
          echo "Runner active. Cancel the workflow in GitHub Actions to stop."
          while true; do
            echo "alive: $(date)"; sleep 300
          done
