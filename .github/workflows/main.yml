name: Remmina RDP - FullPower Tools (dolvin)

on:
  workflow_dispatch:

jobs:
  remmina-full:
    runs-on: ubuntu-latest
    timeout-minutes: 720

    env:
      USERNAME: "dolvin"
      PASSWORD: "whatsapp2"         # WARNING: plaintext (unsafe for public repos). Prefer using a secret for password.
      GOPATH: /opt/go
      GOBIN: /opt/go/bin
      TOOLS_DIR: /opt/tools

    steps:
      - name: Checkout (for completeness)
        uses: actions/checkout@v4

      - name: Basic system info
        run: |
          echo "Runner info:"
          uname -a
          lsb_release -a || true
          free -h
          df -h /

      - name: Prepare noninteractive apt and update
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update -y
          sudo apt-get upgrade -y

      - name: Create user dolvin & SSH key (optional)
        env:
          SSH_PUB_KEY: ${{ secrets.SSH_PUB_KEY || '' }}
        run: |
          USER=${{ env.USERNAME }}
          PASS=${{ env.PASSWORD }}
          # create user if missing
          if ! id -u "$USER" >/dev/null 2>&1; then
            sudo useradd -m -s /bin/bash "$USER"
          fi
          echo "${USER}:${PASS}" | sudo chpasswd
          sudo usermod -aG sudo "$USER" || true
          sudo mkdir -p /home/${USER}/.ssh
          sudo chown ${USER}:${USER} /home/${USER}/.ssh
          sudo chmod 700 /home/${USER}/.ssh

          if [ -n "$SSH_PUB_KEY" ]; then
            echo "$SSH_PUB_KEY" | sudo tee /home/${USER}/.ssh/authorized_keys > /dev/null
            sudo chown ${USER}:${USER} /home/${USER}/.ssh/authorized_keys
            sudo chmod 600 /home/${USER}/.ssh/authorized_keys
            echo "✅ SSH key installed for $USER"
          else
            echo "No SSH_PUB_KEY secret — use password: $PASS"
          fi

          # ensure sshd active
          sudo sed -i 's/^#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config || true
          sudo sed -i 's/^PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config || true
          sudo systemctl restart ssh || true

      - name: Add swap 4GB and zram-tools
        run: |
          if [ ! -f /swapfile ]; then
            sudo fallocate -l 4G /swapfile
            sudo chmod 600 /swapfile
            sudo mkswap /swapfile
            sudo swapon /swapfile
            echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab
            echo "✅ Swap 4G created"
          else
            echo "Swap exists"
          fi
          sudo apt-get install -y zram-tools || true

      - name: Install XFCE (light) + XRDP (Remmina-ready)
        run: |
          sudo apt-get install -y --no-install-recommends xfce4 xfce4-terminal xfce4-goodies dbus-x11 xrdp
          # set xfce session for the user
          echo "xfce4-session" | sudo tee /home/${{ env.USERNAME }}/.xsession
          sudo chown ${{ env.USERNAME }}:${{ env.USERNAME }} /home/${{ env.USERNAME }}/.xsession
          # make sure xrdp uses xfce
          sudo sed -i.bak 's|exec /bin/sh /etc/X11/Xsession|#exec /bin/sh /etc/X11/Xsession|' /etc/xrdp/startwm.sh || true
          echo "exec xfce4-session" | sudo tee -a /etc/xrdp/startwm.sh
          sudo systemctl enable xrdp --now
          sudo systemctl restart dbus || true

      - name: Performance tuning (sysctl & ulimit)
        run: |
          # network & file limits for heavy scanning
          sudo sysctl -w net.core.somaxconn=4096 || true
          sudo sysctl -w fs.file-max=200000 || true
          # increase open files for session
          sudo sh -c 'ulimit -n 65536 || true'

      - name: Install prerequisites & Go (latest)
        run: |
          sudo apt-get install -y git curl wget build-essential python3-pip jq unzip htop net-tools tcpdump nmap masscan gobuster
          # install latest Go
          latest=$(curl -fsS https://go.dev/VERSION?m=text)
          wget -q "https://go.dev/dl/${latest}.linux-amd64.tar.gz" -O /tmp/go.tar.gz
          sudo rm -rf /usr/local/go
          sudo tar -C /usr/local -xzf /tmp/go.tar.gz
          rm -f /tmp/go.tar.gz
          sudo mkdir -p ${GOPATH}/bin ${TOOLS_DIR}
          sudo chown -R $USER:$USER ${GOPATH} ${TOOLS_DIR} || true
          echo 'export PATH=$PATH:/usr/local/go/bin:${GOBIN}' | sudo tee /etc/profile.d/go_path.sh

      - name: Install Go-based pentest tools (subfinder, httpx, nuclei, dnsx, naabu, ffuf, gf)
        run: |
          export PATH=$PATH:/usr/local/go/bin:${GOBIN}
          /usr/local/go/bin/go install github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest || true
          /usr/local/go/bin/go install github.com/projectdiscovery/httpx/cmd/httpx@latest || true
          /usr/local/go/bin/go install github.com/projectdiscovery/nuclei/v2/cmd/nuclei@latest || true
          /usr/local/go/bin/go install github.com/projectdiscovery/dnsx/cmd/dnsx@latest || true
          /usr/local/go/bin/go install github.com/projectdiscovery/naabu/v2/cmd/naabu@latest || true
          /usr/local/go/bin/go install github.com/ffuf/ffuf@latest || true
          /usr/local/go/bin/go install github.com/tomnomnom/gf@latest || true
          # place go bins into /opt/go/bin for user
          sudo ln -sf /usr/local/go/bin/* ${GOBIN}/ 2>/dev/null || true
          sudo chown -R ${{ env.USERNAME }}:${{ env.USERNAME }} ${GOPATH} ${GOBIN} ${TOOLS_DIR} || true

      - name: Install additional tools (apt & pip)
        run: |
          sudo apt-get install -y amass seclists wfuzz aircrack-ng hashcat john || true
          sudo pip3 install trufflehog || true
          # arjun
          cd /opt || cd /tmp
          if [ ! -d /opt/Arjun ]; then
            sudo git clone https://github.com/s0md3v/Arjun.git /opt/Arjun || true
            sudo pip3 install -r /opt/Arjun/requirements.txt || true
            sudo ln -sf /opt/Arjun/arjun.py /usr/local/bin/arjun
            sudo chmod +x /usr/local/bin/arjun
          fi
          # xray (latest linux_amd64)
          cd /tmp
          xray_url=$(curl -s https://api.github.com/repos/chaitin/xray/releases/latest | jq -r '.assets[] | select(.name | contains("linux_amd64")) | .browser_download_url')
          if [ -n "$xray_url" ]; then
            wget -qO /tmp/xray.zip "$xray_url" || true
            unzip -o /tmp/xray.zip -d /tmp/xray || true
            sudo mv /tmp/xray/xray /usr/local/bin/ 2>/dev/null || true
            sudo chmod +x /usr/local/bin/xray || true
          fi

      - name: Install GF patterns & SecLists
        run: |
          sudo -u ${{ env.USERNAME }} mkdir -p /home/${{ env.USERNAME }}/.gf
          sudo git clone --depth=1 https://github.com/1ndianl33t/Gf-Patterns /tmp/gf-patterns || true
          sudo cp /tmp/gf-patterns/*.json /home/${{ env.USERNAME }}/.gf/ 2>/dev/null || true
          sudo chown -R ${{ env.USERNAME }}:${{ env.USERNAME }} /home/${{ env.USERNAME }}/.gf
          sudo apt-get install -y seclists || true

      - name: (Optional) Metasploit installer (can be slow)
        run: |
          # install metasploit framework (best effort)
          curl https://raw.githubusercontent.com/rapid7/metasploit-framework/master/msfinstall > /tmp/msfinstall.sh
          sudo bash /tmp/msfinstall.sh || true

      - name: Install & Start Tailscale (use secret TALESCALE_AUTH_KEY)
        env:
          TALESCALE_AUTH_KEY: ${{ secrets.TALESCALE_AUTH_KEY }}
        run: |
          if [ -z "${{ secrets.TALESCALE_AUTH_KEY }}" ]; then
            echo "ERROR: Set repository secret named TALESCALE_AUTH_KEY (value = tskey-auth-... )"
            exit 1
          fi
          curl -fsSL https://tailscale.com/install.sh | sh
          sudo tailscale up --authkey=${{ secrets.TALESCALE_AUTH_KEY }} --hostname=remmina-runner-${{ github.run_id }} || (sudo tailscaled & sleep 2 && sudo tailscale up --authkey=${{ secrets.TALESCALE_AUTH_KEY }} --hostname=remmina-runner-${{ github.run_id }})

      - name: Wait for Tailscale IP & show connection info
        run: |
          retries=0
          ip=""
          while [ $retries -lt 20 ] && [ -z "$ip" ]; do
            ip=$(tailscale ip -4 2>/dev/null || true)
            if [ -z "$ip" ]; then
              sleep 5
              retries=$((retries+1))
            fi
          done
          if [ -z "$ip" ]; then
            echo "Failed to get Tailscale IP"
            tailscale status || true
            exit 1
          fi
          echo "TAILSCALE_IP=$ip" >> $GITHUB_ENV
          echo "========================================="
          echo "REMNINA / RDP CONNECT INFO"
          echo "RDP Host (Tailscale): $ip"
          echo "Username: ${{ env.USERNAME }}"
          echo "Password: ${{ env.PASSWORD }}"
          echo ""
          echo "Remmina settings: Protocol=RDP, Security=Negotiate or RDP, Color depth 16/24"
          echo "If Remmina shows black screen: try reconnect or set /etc/xrdp/startwm.sh to exec xfce4-session"
          echo "========================================="

      - name: Final checks (disk / memory / sample tool versions)
        run: |
          echo "Disk usage:"
          df -h /
          echo ""
          echo "Memory:"
          free -h
          echo ""
          echo "Sample versions:"
          subfinder -version 2>/dev/null || subfinder -h 2>/dev/null || true
          httpx -version 2>/dev/null || true
          nuclei -version 2>/dev/null || true
          /usr/local/go/bin/go version || true

      - name: Keep runner alive (manual cancel to stop)
        run: |
          echo "Runner active. Cancel workflow in Actions UI to terminate."
          while true; do
            echo "alive: $(date)"; sleep 300
          done
