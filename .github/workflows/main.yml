name: setup-pentest-environment

on:
  workflow_dispatch:

jobs:
  setup-tools:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    env:
      # Jangan taruh password nyata di sini — set as repo secret (Settings → Secrets)
      DOLVIN_PASS: ${{ secrets.DOLVIN_PASS }}
      GO_VERSION: "1.21.11"   # ganti kalau mau versi lain
      GOPATH: ${{ runner.temp }}/go

    steps:
      - name: Prepare runner
        run: |
          sudo apt-get update -y
          sudo apt-get upgrade -y
          # small swap so heavy builds won't OOM on runner
          sudo fallocate -l 4G /swapfile || sudo dd if=/dev/zero of=/swapfile bs=1M count=4096
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          sudo sysctl vm.swappiness=10
          free -h

      - name: Install base packages (apt)
        run: |
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
            build-essential git curl wget unzip ca-certificates gnupg lsb-release \
            net-tools iproute2 tcpdump nmap masscan netcat-openbsd socat jq \
            python3 python3-pip python3-venv python3-dev unzip zip \
            aircrack-ng iw rfkill macchanger \
            hashcat john hashcat-utils \
            sqlmap nikto \
            whois dnsutils
          
          # ensure pip & some python tools
          sudo -H python3 -m pip install --upgrade pip setuptools wheel
          sudo -H python3 -m pip install mitmproxy

      - name: Install Snap & snaps (optional GUI helpers)
        run: |
          sudo apt-get install -y snapd
          sudo snap install --classic nmap   || true
          # note: some snaps may not be useful on CI runners, but included for convenience

      - name: Install Go (manual) and setup env
        run: |
          set -e
          GO_VER="${{ env.GO_VERSION }}"
          ARCH="linux-amd64"
          TGZ="go${GO_VER}.${ARCH}.tar.gz"
          curl -fsSL "https://golang.org/dl/${TGZ}" -o "/tmp/${TGZ}"
          sudo rm -rf /usr/local/go
          sudo tar -C /usr/local -xzf "/tmp/${TGZ}"
          mkdir -p "${GOPATH}/bin"
          # add to PATH for this run
          echo "export PATH=/usr/local/go/bin:${GOPATH}/bin:\$PATH" >> $GITHUB_ENV
          echo "export GOPATH=${GOPATH}" >> $GITHUB_ENV
          /usr/local/go/bin/go version

      - name: Install common Go-based tools
        run: |
          # make sure go is available in the current shell
          export PATH=/usr/local/go/bin:${GOPATH}/bin:$PATH
          export GOPATH=${GOPATH}
          go install github.com/OWASP/Amass/v3/...@latest
          go install github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest
          go install github.com/ffuf/ffuf@latest
          go install github.com/jaeles-project/gospider@latest || true
          go install github.com/tomnomnom/httprobe@latest
          go install github.com/tomnomnom/gf@latest
          go install github.com/tomnomnom/assetfinder@latest
          go install github.com/projectdiscovery/nuclei/v2/cmd/nuclei@latest
          go install github.com/jaeles-project/gf@latest || true
          # copy go binaries to /usr/local/bin for convenience
          sudo cp -v ${GOPATH}/bin/* /usr/local/bin/ || true

      - name: Install some community binaries (deb / tar)
        run: |
          set -e
          # gobuster
          sudo apt-get install -y gobuster || ( wget -qO- https://github.com/OJ/gobuster/releases/latest/download/gobuster-linux-amd64.tar.gz | sudo tar -xz -C /usr/local/bin gobuster )
          # wfuzz via pip
          sudo -H python3 -m pip install wfuzz || true
          # install massdns (example)
          # (left out heavy/complex builds to keep runner friendly)

      - name: Create user 'dolvin' (optional)
        if: env.DOLVIN_PASS != ''
        run: |
          # create user and set password from secret. If secret not set, skip.
          sudo useradd -m -s /bin/bash dolvin || true
          echo "dolvin:${DOLVIN_PASS}" | sudo chpasswd
          sudo usermod -aG sudo dolvin || true
          id dolvin

      - name: Final healthcheck (versions + PATH)
        run: |
          echo "=== Versions ==="
          nmap --version | head -n1 || true
          masscan --version || true
          python3 --version
          go version || true
          echo "=== tools in /usr/local/bin (sample) ==="
          ls -1 /usr/local/bin | sed -n '1,120p' || true
          echo "=== go bins ==="
          ls -1 ${GOPATH}/bin || true

      - name: Save artifact (optional logs)
        uses: actions/upload-artifact@v4
        with:
          name: runner-info
          path: |
            /tmp
