name: Linux RDP (Remmina-ready) - dolvin

on:
  workflow_dispatch:

jobs:
  remmina-rdp:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    env:
      XRDP_USER: "dolvin"
      XRDP_PASS: "whatsapp2"   # <-- WARNING: plaintext in workflow (unsafe for public repos). Prefer secrets.

    steps:
      - name: Show runner info
        run: |
          echo "Runner: $(uname -a)"
          lsb_release -a || true
          free -h
          df -h /

      - name: Prepare noninteractive apt
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update -y
          sudo apt-get upgrade -y

      - name: Create user dolvin and setup SSH (optional key)
        env:
          SSH_PUB_KEY: ${{ secrets.SSH_PUB_KEY || '' }}
        run: |
          USER="${XRDP_USER}"
          PASS="${XRDP_PASS}"
          # create user if not exists
          if ! id -u "$USER" >/dev/null 2>&1; then
            sudo useradd -m -s /bin/bash "$USER"
          fi
          echo "${USER}:${PASS}" | sudo chpasswd
          sudo usermod -aG sudo "$USER" || true
          sudo mkdir -p /home/${USER}/.ssh
          sudo chown ${USER}:${USER} /home/${USER}/.ssh
          sudo chmod 700 /home/${USER}/.ssh

          if [ -n "$SSH_PUB_KEY" ]; then
            echo "$SSH_PUB_KEY" | sudo tee /home/${USER}/.ssh/authorized_keys > /dev/null
            sudo chown ${USER}:${USER} /home/${USER}/.ssh/authorized_keys
            sudo chmod 600 /home/${USER}/.ssh/authorized_keys
            echo "SSH public key installed for ${USER}"
          else
            echo "No SSH_PUB_KEY secret â€” use password ${PASS}"
          fi

          # ensure sshd running
          sudo sed -i 's/^#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config || true
          sudo sed -i 's/^PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config || true
          sudo systemctl restart ssh || true

      - name: Add swap 2GB (avoid OOM)
        run: |
          if [ ! -f /swapfile ]; then
            sudo fallocate -l 2G /swapfile
            sudo chmod 600 /swapfile
            sudo mkswap /swapfile
            sudo swapon /swapfile
            echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab
            echo "Swap 2G created"
          else
            echo "Swap exists"
          fi
          sudo apt-get install -y zram-tools || true

      - name: Install XFCE + xrdp (Remmina-compatible)
        run: |
          sudo apt-get install -y --no-install-recommends xfce4 xfce4-terminal xfce4-goodies dbus-x11 xrdp
          # set xfce session for user
          echo "xfce4-session" | sudo tee /home/${XRDP_USER}/.xsession
          sudo chown ${XRDP_USER}:${XRDP_USER} /home/${XRDP_USER}/.xsession
          # ensure xrdp uses xfce
          sudo sed -i.bak 's|test -x /usr/bin/x-session-manager|#&|' /etc/xrdp/startwm.sh || true
          sudo sed -i 's|exec /bin/sh /etc/X11/Xsession|exec xfce4-session|' /etc/xrdp/startwm.sh || true
          sudo systemctl enable xrdp --now
          # restart dbus for session integrity
          sudo systemctl restart dbus || true

      - name: Install Tailscale and bring up (requires secret)
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          if [ -z "${TAILSCALE_AUTH_KEY:-}" ]; then
            echo "ERROR: Set secret TAILSCALE_AUTH_KEY in repo settings."
            exit 1
          fi
          curl -fsSL https://tailscale.com/install.sh | sh
          # try up; if tailscaled not running, start it first
          sudo tailscale up --authkey=${TAILSCALE_AUTH_KEY} --hostname=remmina-runner-${{ github.run_id }} || (sudo tailscaled & sleep 2 && sudo tailscale up --authkey=${TAILSCALE_AUTH_KEY} --hostname=remmina-runner-${{ github.run_id }})

      - name: Wait & export Tailscale IP
        run: |
          retries=0
          ip=""
          while [ $retries -lt 12 ] && [ -z "$ip" ]; do
            ip=$(tailscale ip -4 2>/dev/null || true)
            if [ -z "$ip" ]; then
              sleep 5
              retries=$((retries+1))
            fi
          done
          if [ -z "$ip" ]; then
            echo "Failed to get Tailscale IP"
            tailscale status || true
            exit 1
          fi
          echo "TAILSCALE_IP=$ip" >> $GITHUB_ENV
          echo "TAILSCALE_IP detected: $ip"

      - name: Final info & Remmina tips
        run: |
          echo "========================================="
          echo "REMNINA / RDP CONNECT INFO"
          echo "RDP Host (Tailscale): ${{ env.TAILSCALE_IP || env.TAILSCALE_IP }}"
          echo "Username: ${XRDP_USER}"
          echo "Password: ${XRDP_PASS}"
          echo ""
          echo "Using Remmina (RDP): create new RDP connection -> Server: ${{ env.TAILSCALE_IP || env.TAILSCALE_IP }}, User: ${XRDP_USER}"
          echo "If Remmina freezes on login, ensure you selected 'Security' -> RDP -> 'Negotiate' or 'RDP' and color depth 16/24."
          echo "========================================="
          # show some checks
          free -h || true
          df -h / || true
          sudo systemctl status xrdp --no-pager || true

      - name: Keep runner alive (cancel-run to stop)
        run: |
          echo "Runner alive. Cancel the workflow in GitHub Actions to terminate."
          while true; do
            echo "alive: $(date)"; sleep 300
          done
