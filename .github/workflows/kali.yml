name: Linux SSH (Tailscale) - High Spec (ubuntu-latest)

on:
  workflow_dispatch:

jobs:
  linux-ssh:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    steps:
      - name: Set noninteractive
        run: |
          export DEBIAN_FRONTEND=noninteractive

      - name: Update & essentials
        run: |
          sudo apt update -y
          sudo apt install -y --no-install-recommends openssh-server sudo curl gnupg lsb-release htop unzip jq

      - name: Create user (or install SSH key if provided)
        env:
          SSH_PUB_KEY: ${{ secrets.SSH_PUB_KEY || '' }}
        run: |
          USER=dolvin
          PASS="whatsapp2"
          sudo useradd -m -s /bin/bash $USER || true
          echo "$USER:$PASS" | sudo chpasswd
          sudo usermod -aG sudo $USER
          sudo mkdir -p /home/$USER/.ssh
          sudo chown $USER:$USER /home/$USER/.ssh
          sudo chmod 700 /home/$USER/.ssh

          if [ -n "$SSH_PUB_KEY" ]; then
            echo "$SSH_PUB_KEY" | sudo tee /home/$USER/.ssh/authorized_keys > /dev/null
            sudo chown $USER:$USER /home/$USER/.ssh/authorized_keys
            sudo chmod 600 /home/$USER/.ssh/authorized_keys
            echo "✅ Added SSH public key for $USER (use key auth)."
          else
            echo "No SSH_PUB_KEY secret found — login with password: $PASS"
          fi

          # make sure sshd runs
          sudo sed -i 's/^#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config || true
          sudo sed -i 's/^PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config || true
          sudo systemctl restart ssh

      - name: Add swapfile (2GB) and install zram
        run: |
          # swapfile 2G
          if [ ! -f /swapfile ]; then
            sudo fallocate -l 2G /swapfile
            sudo chmod 600 /swapfile
            sudo mkswap /swapfile
            sudo swapon /swapfile
            echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab
            echo "✅ Swapfile 2G created"
          else
            echo "Swapfile already exists"
          fi

          # zram-tools (compressed swap in RAM)
          sudo apt install -y zram-tools || true
          # configure zram (defaults usually fine)

      - name: Install Tailscale
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          if [ -z "$TAILSCALE_AUTH_KEY" ]; then
            echo "ERROR: Set secret TAILSCALE_AUTH_KEY in repo settings."
            exit 1
          fi
          curl -fsSL https://tailscale.com/install.sh | sh
          sudo tailscale up --authkey=${TAILSCALE_AUTH_KEY} --hostname=gh-runner-${{ github.run_id }} || (sudo tailscaled & sleep 2 && sudo tailscale up --authkey=${TAILSCALE_AUTH_KEY} --hostname=gh-runner-${{ github.run_id }})

      - name: Wait & get Tailscale IP
        run: |
          retries=0
          ip=""
          while [ $retries -lt 12 ] && [ -z "$ip" ]; do
            ip=$(tailscale ip -4 2>/dev/null || true)
            if [ -z "$ip" ]; then
              sleep 5
              retries=$((retries+1))
            fi
          done

          if [ -z "$ip" ]; then
            echo "Failed to get Tailscale IP"
            tailscale status || true
            exit 1
          fi

          echo "TAILSCALE_IP=$ip" >> $GITHUB_ENV
          echo "✅ Tailscale IP: $ip"

      - name: Install common pentest tools (optional - comment out if you want minimal)
        run: |
          sudo apt update -y
          sudo apt install -y --no-install-recommends nmap golang-go git gobuster jq python3-pip
          # go-based tools (install into /opt/tools)
          sudo mkdir -p /opt/tools
          sudo chown $USER:$USER /opt/tools || true
          export GOPATH=/opt/tools
          /bin/bash -lc "GOBIN=/opt/tools/bin GOPATH=/opt/tools go install github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest || true"
          /bin/bash -lc "GOBIN=/opt/tools/bin GOPATH=/opt/tools go install github.com/projectdiscovery/httpx/cmd/httpx@latest || true"
          /bin/bash -lc "GOBIN=/opt/tools/bin GOPATH=/opt/tools go install github.com/projectdiscovery/nuclei/v2/cmd/nuclei@latest || true"
          echo "✅ Basic tools installed to /opt/tools/bin (may take few minutes)"

      - name: Show connection & tips
        run: |
          echo "======================================"
          echo "SSH (recommended):"
          if [ -n "${{ secrets.SSH_PUB_KEY }}" ]; then
            echo "Use your SSH private key to connect: ssh linuxuser@${{ env.TAILSCALE_IP }}"
          else
            echo "ssh linuxuser@${{ env.TAILSCALE_IP }}  (password: Linux123!@ )"
          fi
          echo ""
          echo "Monitor: htop"
          echo "Tool binaries: /opt/tools/bin (add to PATH if needed)"
          echo "To stop workflow: Cancel the run in GitHub Actions UI"
          echo "======================================"

      - name: Keep runner alive (interactive session window)
        run: |
          echo "Runner will remain active until you cancel the workflow (timeout ${JOB_TIMEOUT_MINUTES:-360}m)."
          while true; do
            echo "[$(date)] runner alive - press Cancel in Actions to terminate"
            sleep 300
          done
